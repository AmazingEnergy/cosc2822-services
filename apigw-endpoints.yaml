AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create all endpoints

Parameters:
  ApiGatewayStack:
    Type: String
    Description: stack name
  Route53DNSStack:
    Type: String
    Description: stack name

Mappings:
  Resources:
    Profile:
      ResourcePath: "profile"
    Product:
      ResourcePath: "products"
      ProductSkuIdResourcePath: "{skuId}"
    Inventory:
      ResourcePath: "inventories"
      InventoryCodeResourcePath: "{code}"
    Promotion:
      ResourcePath: "promotion"
      PromotionCodeResourcePath: "codes"
      PromotionRuleResourcePath: "rules"
      ApplyPromotionResourcePath: "apply"
    Cart:
      ResourcePath: "carts"
      CartIdResourcePath: "{id}"
      PayCartResourcePath: "pay"
      SubmitCartResourcePath: "submit"
      AddItemCartResourcePath: "addItem"
      RemoveItemCartResourcePath: "removeItem"
      UpdateItemCartResourcePath: "updateItem"
    Order:
      ResourcePath: "orders"
      OrderIdResourcePath: "{id}"
      CancelOrderResourcePath: "cancel"
      RejectOrderResourcePath: "reject"
      CompleteOrderResourcePath: "complete"
    Hook:
      ResourcePath: "hooks"
      StripeResourcePath: "stripe"
      StripePaymentResourcePath: "payments"

Resources:
  ###############################################
  # API Gateway Resources
  ###############################################

  ProfileResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Profile, ResourcePath]

  ProductResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Product, ResourcePath]

  ProductSkuIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ProductResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Product, ProductSkuIdResourcePath]

  InventoryResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Inventory, ResourcePath]

  InventoryCodeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref InventoryResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Inventory, InventoryCodeResourcePath]

  PromotionResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Promotion, ResourcePath]

  PromotionCodeResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PromotionResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Promotion, PromotionCodeResourcePath]

  PromotionRuleResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PromotionResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Promotion, PromotionRuleResourcePath]

  ApplyPromotionResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PromotionResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Promotion, ApplyPromotionResourcePath]

  CartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, ResourcePath]

  CartIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, CartIdResourcePath]

  PayCartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, PayCartResourcePath]

  SubmitCartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, SubmitCartResourcePath]

  AddItemCartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, AddItemCartResourcePath]

  RemoveItemCartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, RemoveItemCartResourcePath]

  UpdateItemCartResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref CartIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Cart, UpdateItemCartResourcePath]

  OrderResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Order, ResourcePath]

  OrderIdResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref OrderResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Order, OrderIdResourcePath]

  CancelOrderResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref OrderIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Order, CancelOrderResourcePath]

  RejectOrderResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref OrderIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Order, RejectOrderResourcePath]

  CompleteOrderResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref OrderIdResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Order, CompleteOrderResourcePath]

  HookResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayRootResourceId"
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Hook, ResourcePath]

  StripeHookResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref HookResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Hook, StripeResourcePath]

  StripePaymentHookResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref StripeHookResource
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      PathPart:
        Fn::FindInMap: [Resources, Hook, StripePaymentResourcePath]

  ###############################################
  # API Gateway OPTIONS Methods
  ###############################################

  ProfileResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt ProfileResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ProductResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt ProductResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ProductSkuIdResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt ProductSkuIdResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  InventoryResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt InventoryResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  InventoryCodeResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt InventoryCodeResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  PromotionResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt PromotionResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  PromotionCodeResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt PromotionCodeResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  PromotionRuleResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt PromotionRuleResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  ApplyPromotionResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt ApplyPromotionResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  CartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt CartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  CartIdResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt CartIdResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  PayCartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt PayCartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  AddItemCartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt AddItemCartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  RemoveItemCartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt RemoveItemCartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  UpdateItemCartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt UpdateItemCartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  SubmitCartResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt SubmitCartResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  OrderResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt OrderResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  OrderIdResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt OrderIdResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  CancelOrderResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt CancelOrderResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  RejectOrderResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt RejectOrderResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  CompleteOrderResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt CompleteOrderResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  HookResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt HookResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  StripeHookResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt StripeHookResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  StripePaymentHookResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Fn::ImportValue: !Sub "${ApiGatewayStack}-ApiGatewayId"
      ResourceId: !GetAtt StripePaymentHookResource.ResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      Integration:
        Type: MOCK
        RequestTemplates: { "application/json": '{"statusCode": 200}' }
        PassthroughBehavior: NEVER
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,PUT,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

Outputs:
  ProfileResourceId:
    Value: !GetAtt ProfileResource.ResourceId
    Description: Id of Profile resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ProfileResourceId"
  ProductResourceId:
    Value: !GetAtt ProductResource.ResourceId
    Description: Id of Product resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ProductResourceId"
  ProductSkuIdResourceId:
    Value: !GetAtt ProductSkuIdResource.ResourceId
    Description: Id of ProductSkuId resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ProductSkuIdResourceId"
  InventoryResourceId:
    Value: !GetAtt InventoryResource.ResourceId
    Description: Id of Inventory resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InventoryResourceId"
  InventoryCodeResourceId:
    Value: !GetAtt InventoryCodeResource.ResourceId
    Description: Id of InventoryCode resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-InventoryCodeResourceId"
  PromotionResourceId:
    Value: !GetAtt PromotionResource.ResourceId
    Description: Id of Promotion resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PromotionResourceId"
  PromotionCodeResourceId:
    Value: !GetAtt PromotionCodeResource.ResourceId
    Description: Id of PromotionCode resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PromotionCodeResourceId"
  PromotionRuleResourceId:
    Value: !GetAtt PromotionRuleResource.ResourceId
    Description: Id of PromotionRule resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PromotionRuleResourceId"
  ApplyPromotionResourceId:
    Value: !GetAtt ApplyPromotionResource.ResourceId
    Description: Id of ApplyPromotion resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ApplyPromotionResourceId"
  CartResourceId:
    Value: !GetAtt CartResource.ResourceId
    Description: Id of Cart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CartResourceId"
  CartIdResourceId:
    Value: !GetAtt CartIdResource.ResourceId
    Description: Id of CartId resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CartIdResourceId"
  PayCartResourceId:
    Value: !GetAtt PayCartResource.ResourceId
    Description: Id of PayCart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PayCartResourceId"
  SubmitCartResourceId:
    Value: !GetAtt SubmitCartResource.ResourceId
    Description: Id of SubmitCart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-SubmitCartResourceId"
  AddItemCartResourceId:
    Value: !GetAtt AddItemCartResource.ResourceId
    Description: Id of AddItemCart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AddItemCartResourceId"
  RemoveItemCartResourceId:
    Value: !GetAtt RemoveItemCartResource.ResourceId
    Description: Id of RemoveItemCart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-RemoveItemCartResourceId"
  UpdateItemCartResourceId:
    Value: !GetAtt UpdateItemCartResource.ResourceId
    Description: Id of UpdateItemCart resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-UpdateItemCartResourceId"
  OrderResourceId:
    Value: !GetAtt OrderResource.ResourceId
    Description: Id of Order resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OrderResourceId"
  OrderIdResourceId:
    Value: !GetAtt OrderIdResource.ResourceId
    Description: Id of OrderId resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-OrderIdResourceId"
  CancelOrderResourceId:
    Value: !GetAtt CancelOrderResource.ResourceId
    Description: Id of CancelOrder resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CancelOrderResourceId"
  RejectOrderResourceId:
    Value: !GetAtt RejectOrderResource.ResourceId
    Description: Id of RejectOrder resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-RejectOrderResourceId"
  CompleteOrderResourceId:
    Value: !GetAtt CompleteOrderResource.ResourceId
    Description: Id of CompleteOrder resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-CompleteOrderResourceId"
  HookResourceId:
    Value: !GetAtt HookResource.ResourceId
    Description: Id of Hook resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-HookResourceId"
  StripeHookResourceId:
    Value: !GetAtt StripeHookResource.ResourceId
    Description: Id of StripeHook resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-StripeHookResourceId"
  StripePaymentHookResourceId:
    Value: !GetAtt StripePaymentHookResource.ResourceId
    Description: Id of StripePaymentHook resource
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-StripePaymentHookResourceId"
