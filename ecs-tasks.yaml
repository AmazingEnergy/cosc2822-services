AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template for creating an ECS tasks and services"
Parameters:
  ClusterStackName:
    Type: String
    Description: "Name of the Cluster Stack"
  NetworkStackName:
    Type: String
    Description: "Name of the Network Stack"
  AlbStackName:
    Type: String
    Description: "Name of the ALB Stack"
  TaskFamily:
    Type: String
    Description: "Name of the Task Family"
    Default: "core"
  TaskContainerName:
    Type: String
    Description: "Name of the Task Container"
    Default: "core-svc"
  ImageRepositoryName:
    Type: String
    Description: "URL of the Task Container Image"
    Default: "easy-shop-core"
  ContainerRegistry:
    Type: String
    Description: container registry
  ImageTag:
    Type: String
    Description: image tag

Resources:
  ECSTaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "${ClusterStackName}-ecs-logs"
      RetentionInDays: 1

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Ref TaskFamily
      Cpu: "512"
      Memory: "1024"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref TaskContainerName
          Image: !Sub "${ContainerRegistry}/${ImageRepositoryName}:${ImageTag}"
          Essential: true
          PortMappings:
            - Name: !Ref TaskFamily
              ContainerPort: 80
              HostPort: 80
              AppProtocol: "http"
              Protocol: "tcp"
            - Name: !Sub "${TaskFamily}-https"
              ContainerPort: 443
              HostPort: 443
              AppProtocol: "http"
              Protocol: "tcp"
          Environment:
            - Name: "NODE_ENV"
              Value: "development"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref ECSTaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref TaskFamily
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -f http://localhost/ || exit 1"
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Name: !Sub "${TaskFamily}-svc"
      Cluster:
        Fn::ImportValue: !Sub "${ClusterStackName}-ECSClusterArn"
      LaunchType: "FARGATE"
      TaskDefinition: !Ref ECSTaskDefinition
      SchedulingStrategy: "REPLICA"
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "DISABLED"
          Subnets:
            - Fn::ImportValue: !Sub "${NetworkStackName}-LabVPCSubnetPrivate1Id"
            - Fn::ImportValue: !Sub "${NetworkStackName}-LabVPCSubnetPrivate2Id"
          SecurityGroups:
            - Fn::ImportValue: !Sub "${NetworkStackName}-AppSecurityGroupId"
      LoadBalancers:
        - ContainerName: !Ref TaskContainerName
          ContainerPort: 80
          TargetGroupArn:
            Fn::ImportValue: !Sub "${AlbStackName}-HttpEcsTargetGroupArn"
      ServiceConnectConfiguration:
        Enabled: true
        Namespace:
          Fn::ImportValue: !Sub "${ClusterStackName}-ECSNamespace"
        Services:
          - PortName: !Ref TaskFamily
            DiscoveryName: !Ref TaskFamily
            ClientAliases:
              - Port: 80
                DnsName: !Ref TaskFamily
        LogConfiguration:
          LogDriver: "awslogs"
          Options:
            awslogs-group: !Ref ECSTaskLogGroup
            awslogs-region: !Ref "AWS::Region"
            awslogs-stream-prefix: !Ref TaskFamily

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccessV2"
      Policies:
        - PolicyName: "ECSTaskExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                Resource: "*"

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ECSTaskRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "sts:GetCallerIdentity"
                Resource: "*"

Outputs:
  ECSTaskDefinitionArn:
    Description: "ECS Task Definition"
    Value: !GetAtt ECSTaskDefinition.TaskDefinitionArn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskDefinitionArn"
  ECSServiceArn:
    Description: "ECS Service"
    Value: !GetAtt ECSService.ServiceArn
    Export:
      Name: !Sub "${AWS::StackName}-ECSServiceArn"
  ECSServiceName:
    Description: "ECS Service"
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-ECSServiceName"
